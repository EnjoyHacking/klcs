!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACLOCAL	Makefile	/^ACLOCAL = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/missing aclocal-1.14$/;"	m
ACLOCAL_M4	Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ALGORITHM_HASH_TABLE_H	hash-table.h	46;"	d
ALGORITHM_TRIE_H	trie.h	41;"	d
AMTAR	Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_DEFAULT_VERBOSITY	Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_RECURSIVE_TARGETS	Makefile	/^AM_RECURSIVE_TARGETS = cscope$/;"	m
AM_V_CC	Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_GEN	Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
ASSUMPTION_NUM_DISTINCT_STRINGS	lcstext.c	39;"	d	file:
AUTOCONF	Makefile	/^AUTOCONF = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/missing autoconf$/;"	m
AUTOHEADER	Makefile	/^AUTOHEADER = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/missing autoheader$/;"	m
AUTOMAKE	Makefile	/^AUTOMAKE = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/missing automake-1.14$/;"	m
AUTOMAKE_OPTIONS	Makefile	/^AUTOMAKE_OPTIONS = foreign$/;"	m
AWK	Makefile	/^AWK = mawk$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CCDEPMODE	Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	Makefile	/^CCLD = $(CC)$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -g -Wall$/;"	m
COMPILE	Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
CONFIG_CLEAN_FILES	Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_HEADER	Makefile	/^CONFIG_HEADER = config.h$/;"	m
CPP	Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS = $/;"	m
CSCOPE	Makefile	/^CSCOPE = cscope$/;"	m
CTAGS	Makefile	/^CTAGS = ctags$/;"	m
CURRENTDIR	Makefile	/^CURRENTDIR = $(shell \/bin\/pwd)$/;"	m
CYGPATH_W	Makefile	/^CYGPATH_W = echo$/;"	m
D	lst_debug.h	69;"	d
D	lst_debug.h	93;"	d
DEFAULT_INCLUDES	Makefile	/^DEFAULT_INCLUDES = -I.$/;"	m
DEFS	Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	Makefile	/^DEPDIR = .deps$/;"	m
DISTFILES	Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DIST_ARCHIVES	Makefile	/^DIST_ARCHIVES = $(distdir).tar.gz$/;"	m
DIST_COMMON	Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.in $(srcdir)\/Makefile.am \\$/;"	m
DIST_SOURCES	Makefile	/^DIST_SOURCES = $(lcstext_SOURCES)$/;"	m
DIST_TARGETS	Makefile	/^DIST_TARGETS = dist-gzip$/;"	m
D_ASSERT	lst_debug.h	79;"	d
D_ASSERT	lst_debug.h	94;"	d
D_ASSERT_PTR	lst_debug.h	88;"	d
D_ASSERT_PTR	lst_debug.h	95;"	d
D_PRINT_TREE	lst_debug.h	50;"	d
D_PRINT_TREE	lst_debug.h	91;"	d
ECHO_C	Makefile	/^ECHO_C = $/;"	m
ECHO_N	Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	Makefile	/^ECHO_T = $/;"	m
EGREP	Makefile	/^EGREP = \/bin\/grep -E$/;"	m
ETAGS	Makefile	/^ETAGS = etags$/;"	m
EXEEXT	Makefile	/^EXEEXT = $/;"	m
GREP	Makefile	/^GREP = \/bin\/grep$/;"	m
GZIP_ENV	Makefile	/^GZIP_ENV = --best$/;"	m
HASH_TABLE_NULL	hash-table.h	106;"	d
HAVE_INTTYPES_H	config.h	5;"	d
HAVE_LIMITS_H	config.h	8;"	d
HAVE_MALLOC	config.h	12;"	d
HAVE_MEMORY_H	config.h	15;"	d
HAVE_MEMSET	config.h	18;"	d
HAVE_STDINT_H	config.h	21;"	d
HAVE_STDLIB_H	config.h	24;"	d
HAVE_STRINGS_H	config.h	27;"	d
HAVE_STRING_H	config.h	30;"	d
HAVE_SYS_PARAM_H	config.h	33;"	d
HAVE_SYS_STAT_H	config.h	36;"	d
HAVE_SYS_TYPES_H	config.h	39;"	d
HAVE_UNISTD_H	config.h	42;"	d
HashTable	hash-table.h	/^typedef struct _HashTable HashTable;$/;"	t	typeref:struct:_HashTable
HashTableEntry	hash-table.h	/^typedef struct _HashTableEntry HashTableEntry;$/;"	t	typeref:struct:_HashTableEntry
HashTableEqualFunc	hash-table.h	/^typedef int (*HashTableEqualFunc)(HashTableKey value1, HashTableKey value2);$/;"	t
HashTableHashFunc	hash-table.h	/^typedef unsigned int (*HashTableHashFunc)(HashTableKey value);$/;"	t
HashTableIterator	hash-table.h	/^typedef struct _HashTableIterator HashTableIterator;$/;"	t	typeref:struct:_HashTableIterator
HashTableKey	hash-table.h	/^typedef void *HashTableKey;$/;"	t
HashTableKeyFreeFunc	hash-table.h	/^typedef void (*HashTableKeyFreeFunc)(HashTableKey value);$/;"	t
HashTablePair	hash-table.h	/^} HashTablePair;$/;"	t	typeref:struct:_HashTablePair
HashTableValue	hash-table.h	/^typedef void *HashTableValue;$/;"	t
HashTableValueFreeFunc	hash-table.h	/^typedef void (*HashTableValueFreeFunc)(HashTableValue value);$/;"	t
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
LAST_UPDATE	lst_timestamp.h	28;"	d
LDFLAGS	Makefile	/^LDFLAGS = $/;"	m
LIBOBJS	Makefile	/^LIBOBJS = $/;"	m
LIBS	Makefile	/^LIBS = $/;"	m
LINK	Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LST_EMPTY_STRING	lst_string.h	37;"	d
LST_Edge	lst_structs.h	/^typedef struct lst_edge              LST_Edge;$/;"	t	typeref:struct:lst_edge
LST_LCS_Data	lst_algorithms.c	/^} LST_LCS_Data;$/;"	t	typeref:struct:lst_lcs_data	file:
LST_Node	lst_structs.h	/^typedef struct lst_node              LST_Node;$/;"	t	typeref:struct:lst_node
LST_NodeIt	lst_algorithms.c	/^} LST_NodeIt;$/;"	t	typeref:struct:lst_node_it	file:
LST_NodeVisitCB	lst_algorithms.h	/^typedef int (*LST_NodeVisitCB)(LST_Node *node, void *data);$/;"	t
LST_PathEnd	lst_stree.c	/^} LST_PathEnd;$/;"	t	typeref:struct:lst_path_end	file:
LST_STREE_STRINGSLOTS	lst_stree.c	43;"	d	file:
LST_STRING_END	lst_string.h	36;"	d
LST_STRING_HASH_SIZE	lst_structs.h	31;"	d
LST_STree	lst_structs.h	/^typedef struct lst_stree             LST_STree;$/;"	t	typeref:struct:lst_stree
LST_String	lst_string.h	/^typedef struct lst_string            LST_String;$/;"	t	typeref:struct:lst_string
LST_StringCB	lst_string.h	/^typedef void (*LST_StringCB) (LST_String *string, void *data);$/;"	t
LST_StringClass	lst_string.h	/^typedef struct lst_stringclass       LST_StringClass;$/;"	t	typeref:struct:lst_stringclass
LST_StringHash	lst_structs.h	/^typedef struct lst_string_hash       LST_StringHash;$/;"	t	typeref:struct:lst_string_hash
LST_StringHashItem	lst_structs.h	/^typedef struct lst_string_hash_item  LST_StringHashItem;$/;"	t	typeref:struct:lst_string_hash_item
LST_StringIndex	lst_string.h	/^typedef struct lst_stringindex       LST_StringIndex;$/;"	t	typeref:struct:lst_stringindex
LST_StringItemCmpFunc	lst_string.h	/^typedef int   (*LST_StringItemCmpFunc) (void *item1, void *item2);$/;"	t
LST_StringItemCopyFunc	lst_string.h	/^typedef void  (*LST_StringItemCopyFunc) (void *src, void *dst);$/;"	t
LST_StringPrintFunc	lst_string.h	/^typedef char *(*LST_StringPrintFunc) (LST_StringIndex *index);$/;"	t
LST_StringSet	lst_string.h	/^typedef struct lst_stringset         LST_StringSet;$/;"	t	typeref:struct:lst_stringset
LTLIBOBJS	Makefile	/^LTLIBOBJS = $/;"	m
MAKEINFO	Makefile	/^MAKEINFO = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/missing makeinfo$/;"	m
MKDIR_P	Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
NORMAL_INSTALL	Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_UNINSTALL	Makefile	/^NORMAL_UNINSTALL = :$/;"	m
OBJEXT	Makefile	/^OBJEXT = o$/;"	m
PACKAGE	Makefile	/^PACKAGE = klcs$/;"	m
PACKAGE	config.h	45;"	d
PACKAGE_BUGREPORT	Makefile	/^PACKAGE_BUGREPORT = sangyafei1026@gmail.com$/;"	m
PACKAGE_BUGREPORT	config.h	48;"	d
PACKAGE_NAME	Makefile	/^PACKAGE_NAME = klcs$/;"	m
PACKAGE_NAME	config.h	51;"	d
PACKAGE_STRING	Makefile	/^PACKAGE_STRING = klcs 1.0$/;"	m
PACKAGE_STRING	config.h	54;"	d
PACKAGE_TARNAME	Makefile	/^PACKAGE_TARNAME = klcs$/;"	m
PACKAGE_TARNAME	config.h	57;"	d
PACKAGE_URL	Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	config.h	60;"	d
PACKAGE_VERSION	Makefile	/^PACKAGE_VERSION = 1.0$/;"	m
PACKAGE_VERSION	config.h	63;"	d
PATH_SEPARATOR	Makefile	/^PATH_SEPARATOR = :$/;"	m
POST_INSTALL	Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	Makefile	/^POST_UNINSTALL = :$/;"	m
PRE_INSTALL	Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	Makefile	/^PRE_UNINSTALL = :$/;"	m
PROGRAMS	Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
SET_MAKE	Makefile	/^SET_MAKE = $/;"	m
SHELL	Makefile	/^SHELL = \/bin\/bash$/;"	m
SOURCES	Makefile	/^SOURCES = $(lcstext_SOURCES)$/;"	m
STDC_HEADERS	config.h	66;"	d
STRIP	Makefile	/^STRIP = $/;"	m
TRIE_NULL	trie.h	80;"	d
Trie	trie.h	/^typedef struct _Trie Trie;$/;"	t	typeref:struct:_Trie
TrieNode	trie.h	/^typedef struct _TrieNode TrieNode;$/;"	t	typeref:struct:_TrieNode
TrieValue	trie.h	/^typedef void *TrieValue;$/;"	t
Trie_node_callback	trie.h	/^typedef void (* Trie_node_callback) (TrieNode * node);$/;"	t
VERSION	Makefile	/^VERSION = 1.0$/;"	m
VERSION	config.h	69;"	d
_HashTable	hash-table.c	/^struct _HashTable {$/;"	s	file:
_HashTableEntry	hash-table.c	/^struct _HashTableEntry {$/;"	s	file:
_HashTableIterator	hash-table.h	/^struct _HashTableIterator {$/;"	s
_HashTablePair	hash-table.h	/^typedef struct _HashTablePair{$/;"	s
_PATTERN_SEARCH_H	pattern_search.h	2;"	d
_POSITION_CONSTRAINTS	position_constraints.h	2;"	d
_Trie	trie.h	/^struct _Trie {$/;"	s
_TrieNode	trie.h	/^struct _TrieNode {$/;"	s
_UTILS_H	utils.h	2;"	d
__libstree_h	libstree.h	26;"	d
__lst_algorithms_h	lst_algorithms.h	26;"	d
__lst_debug_h	lst_debug.h	26;"	d
__lst_macros_h	lst_macros.h	26;"	d
__lst_stree_h	lst_stree.h	26;"	d
__lst_string_h	lst_string.h	26;"	d
__lst_structs_h	lst_structs.h	26;"	d
__lst_timestamp_h	lst_timestamp.h	26;"	d
_element_t	position_constraints.h	/^struct _element_t {$/;"	s
_flow_set_t	position_constraints.h	/^struct _flow_set_t {$/;"	s
_flow_t	position_constraints.h	/^struct _flow_t {$/;"	s
_offset_t	position_constraints.h	/^struct _offset_t {$/;"	s
_token_t	position_constraints.h	/^struct _token_t {$/;"	s
abs_builddir	Makefile	/^abs_builddir = \/home\/yafei\/workspace_for_github\/klcs$/;"	m
abs_srcdir	Makefile	/^abs_srcdir = \/home\/yafei\/workspace_for_github\/klcs$/;"	m
abs_top_builddir	Makefile	/^abs_top_builddir = \/home\/yafei\/workspace_for_github\/klcs$/;"	m
abs_top_srcdir	Makefile	/^abs_top_srcdir = \/home\/yafei\/workspace_for_github\/klcs$/;"	m
ac_ct_CC	Makefile	/^ac_ct_CC = gcc$/;"	m
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_check_type	configure	/^ac_fn_c_check_type ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
aix_post_process_depfile	depcomp	/^aix_post_process_depfile ()$/;"	f
alg_clear_busflag	lst_algorithms.c	/^alg_clear_busflag(LST_Node *node, void *data)$/;"	f	file:
alg_clear_visitors	lst_algorithms.c	/^alg_clear_visitors(LST_Node *node, void *data)$/;"	f	file:
alg_edge_length	lst_algorithms.c	/^static int alg_edge_length(LST_Node *node) $/;"	f	file:
alg_find_child	lst_algorithms.c	/^static LST_Node* alg_find_child(LST_Node *node, char ch)$/;"	f	file:
alg_find_deepest	lst_algorithms.c	/^alg_find_deepest(LST_Node *node, LST_LCS_Data *data)$/;"	f	file:
alg_longest_substring	lst_algorithms.c	/^alg_longest_substring(LST_STree *tree, u_int min_len, u_int max_len, int lcs, int k, u_int *num_distinct_strings)$/;"	f	file:
alg_node_it_free	lst_algorithms.c	/^alg_node_it_free(LST_NodeIt *it)$/;"	f	file:
alg_node_it_new	lst_algorithms.c	/^alg_node_it_new(LST_Node *node)$/;"	f	file:
alg_node_it_set_visited	lst_algorithms.c	/^alg_node_it_set_visited(LST_NodeIt *it)$/;"	f	file:
alg_set_visitors	lst_algorithms.c	/^alg_set_visitors(LST_Node *node, LST_LCS_Data *data)$/;"	f	file:
alg_substring_check	lst_algorithms.c	/^static int alg_substring_check(LST_Node *node, LST_String *string, int idx)$/;"	f	file:
alg_traverse_edge	lst_algorithms.c	/^static int alg_traverse_edge(LST_Edge *edge, LST_String *string, int idx, int start, int end) $/;"	f	file:
all_bitstrings	lst_algorithms.c	/^  u_char        *all_bitstrings;$/;"	m	struct:lst_lcs_data	file:
all_bitstrings_size	lst_algorithms.c	/^  int           all_bitstrings_size;$/;"	m	struct:lst_lcs_data	file:
allow_duplicates	lst_structs.h	/^  int                               allow_duplicates;$/;"	m	struct:lst_stree
am__CONFIG_DISTCLEAN_FILES	Makefile	/^am__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\$/;"	m
am__aclocal_m4_deps	Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.in$/;"	m
am__can_run_installinfo	Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__distuninstallcheck_listfiles	Makefile	/^am__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\$/;"	m
am__include	Makefile	/^am__include = include$/;"	m
am__installdirs	Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	Makefile	/^am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'$/;"	m
am__leading_dot	Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	Makefile	/^am__make_running_with_option = \\$/;"	m
am__mv	Makefile	/^am__mv = mv -f$/;"	m
am__post_remove_distdir	Makefile	/^am__post_remove_distdir = $(am__remove_distdir)$/;"	m
am__quote	Makefile	/^am__quote = $/;"	m
am__remove_distdir	Makefile	/^am__remove_distdir = \\$/;"	m
am__tagged_files	Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\$/;"	m
am__tar	Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	Makefile	/^am__v_CC_1 = $/;"	m
am__v_GEN_	Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	Makefile	/^am__v_at_1 = $/;"	m
am_lcstext_OBJECTS	Makefile	/^am_lcstext_OBJECTS = lcstext.$(OBJEXT) lst_algorithms.$(OBJEXT) \\$/;"	m
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
begin_of_flow	position_constraints.h	/^	u_int begin_of_flow;$/;"	m	struct:_token_t
bin_PROGRAMS	Makefile	/^bin_PROGRAMS = lcstext$(EXEEXT)$/;"	m
bindir	Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bitstrings	lst_structs.h	/^  u_char                            *bitstrings;  \/\/ add by sangyafei$/;"	m	struct:lst_stree
bitstrings	lst_structs.h	/^  u_char                      *bitstrings;  \/\/ add by syf$/;"	m	struct:lst_node
bitstrings_copy	lst_algorithms.c	/^static void bitstrings_copy(u_char *dst, u_char *src, int size){$/;"	f	file:
bitstrings_size	lst_structs.h	/^  int                         bitstrings_size; \/\/ add by syf$/;"	m	struct:lst_node
build_alias	Makefile	/^build_alias = $/;"	m
build_lps_array	pattern_search.c	/^void build_lps_array(char *pattern, int M, int *lps) {$/;"	f
builddir	Makefile	/^builddir = .$/;"	m
bus_visited	lst_structs.h	/^  u_int                       bus_visited;$/;"	m	struct:lst_node
byte_class	lst_string.c	/^static LST_StringClass byte_class = $/;"	v	file:
checkForSubString	lcstext.c	/^void checkForSubString(LST_STree *tree, LST_String  *string)$/;"	f
cmp_func	lst_string.h	/^  LST_StringItemCmpFunc       cmp_func;$/;"	m	struct:lst_stringclass
convert_bitstrings_to_int	lst_algorithms.c	/^static long convert_bitstrings_to_int(u_char* bitstrings, int bitstrings_size){$/;"	f	file:
copy_func	lst_string.h	/^  LST_StringItemCopyFunc      copy_func;$/;"	m	struct:lst_stringclass
data	lst_string.h	/^  void                       *data;$/;"	m	struct:lst_string
data	trie.h	/^	TrieValue data;$/;"	m	struct:_TrieNode
data_external	lst_string.h	/^  u_char                      data_external;$/;"	m	struct:lst_string
datadir	Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir = ${prefix}\/share$/;"	m
deepest	lst_algorithms.c	/^  int           deepest;$/;"	m	struct:lst_lcs_data	file:
depcomp	Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
dirScan	utils.c	/^void dirScan(char* dirName, LST_StringSet *set){$/;"	f
distcleancheck_listfiles	Makefile	/^distcleancheck_listfiles = find . -type f -print$/;"	m
distdir	Makefile	/^distdir = $(PACKAGE)-$(VERSION)$/;"	m
distuninstallcheck_listfiles	Makefile	/^distuninstallcheck_listfiles = find . -type f -print$/;"	m
docdir	Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
dst_node	lst_structs.h	/^  LST_Node                   *dst_node;$/;"	m	struct:lst_edge
dvidir	Makefile	/^dvidir = ${docdir}$/;"	m
edge	lst_stree.c	/^  LST_Edge    *edge;$/;"	m	struct:lst_path_end	file:
edge_free	lst_stree.c	/^edge_free(LST_Edge *edge)$/;"	f	file:
edge_leaf_new	lst_stree.c	/^edge_leaf_new(LST_STree *tree,$/;"	f	file:
edge_new	lst_stree.c	/^edge_new(LST_Node *src_node,$/;"	f	file:
element_head	position_constraints.h	/^	LIST_HEAD(element_list, _element_t) element_head;$/;"	m	struct:_flow_t
element_t	position_constraints.h	/^typedef struct _element_t 	element_t;$/;"	t	typeref:struct:_element_t
end_index	lst_string.h	/^  u_int       *end_index;$/;"	m	struct:lst_stringindex
end_index_local	lst_string.h	/^  u_int        end_index_local;$/;"	m	struct:lst_stringindex
entries	hash-table.c	/^	unsigned int entries;$/;"	m	struct:_HashTable	file:
entry	position_constraints.h	/^	LIST_ENTRY(_element_t) entry;$/;"	m	struct:_element_t
entry	position_constraints.h	/^	LIST_ENTRY(_flow_t) entry;$/;"	m	struct:_flow_t
equal_func	hash-table.c	/^	HashTableEqualFunc equal_func;$/;"	m	struct:_HashTable	file:
exec_prefix	Makefile	/^exec_prefix = ${prefix}$/;"	m
ext	lst_structs.h	/^  u_int                             ext;$/;"	m	struct:lst_stree
extra_index	lst_string.h	/^  u_int        extra_index;$/;"	m	struct:lst_stringindex
fileCounter	utils.c	/^int fileCounter = 0;$/;"	v
fix_tree_cb	lst_stree.c	/^fix_tree_cb(LST_Node *node, void *data)$/;"	f	file:
flow_free	position_constraints.c	/^void flow_free(flow_t *flow){$/;"	f
flow_head	position_constraints.h	/^	LIST_HEAD(flow_list, _flow_t) flow_head;	$/;"	m	struct:_flow_set_t
flow_new	position_constraints.c	/^flow_t *flow_new(LST_String *string, LST_StringSet *tokens){$/;"	f
flow_print	position_constraints.c	/^void flow_print(flow_t *flow) {$/;"	f
flow_set_add	position_constraints.c	/^void flow_set_add(flow_set_t *flow_set, flow_t *flow){$/;"	f
flow_set_free	position_constraints.c	/^void flow_set_free(flow_set_t *flow_set){$/;"	f
flow_set_new	position_constraints.c	/^flow_set_t* flow_set_new(void){$/;"	f
flow_set_t	position_constraints.h	/^typedef struct _flow_set_t	flow_set_t;$/;"	t	typeref:struct:_flow_set_t
flow_set_traverse	position_constraints.c	/^Trie*  flow_set_traverse(flow_set_t *flow_set) {$/;"	f
flow_t	position_constraints.h	/^typedef struct _flow_t 		flow_t;$/;"	t	typeref:struct:_flow_t
func_cl_dashL	compile	/^func_cl_dashL ()$/;"	f
func_cl_dashl	compile	/^func_cl_dashl ()$/;"	f
func_cl_wrapper	compile	/^func_cl_wrapper ()$/;"	f
func_file_conv	compile	/^func_file_conv ()$/;"	f
get_number_of_distinct_string	lst_algorithms.c	/^int get_number_of_distinct_string(LST_Node *node, int size){$/;"	f
give_advice	missing	/^give_advice ()$/;"	f
hash_func	hash-table.c	/^	HashTableHashFunc hash_func;$/;"	m	struct:_HashTable	file:
hash_table	hash-table.h	/^	HashTable *hash_table;$/;"	m	struct:_HashTableIterator
hash_table_allocate_table	hash-table.c	/^static int hash_table_allocate_table(HashTable *hash_table)$/;"	f	file:
hash_table_enlarge	hash-table.c	/^static int hash_table_enlarge(HashTable *hash_table)$/;"	f	file:
hash_table_free	hash-table.c	/^void hash_table_free(HashTable *hash_table)$/;"	f
hash_table_free_entry	hash-table.c	/^static void hash_table_free_entry(HashTable *hash_table, HashTableEntry *entry)$/;"	f	file:
hash_table_insert	hash-table.c	/^int hash_table_insert(HashTable *hash_table, HashTableKey key,$/;"	f
hash_table_iter_has_more	hash-table.c	/^int hash_table_iter_has_more(HashTableIterator *iterator)$/;"	f
hash_table_iter_next	hash-table.c	/^HashTablePair hash_table_iter_next(HashTableIterator *iterator)$/;"	f
hash_table_iterate	hash-table.c	/^void hash_table_iterate(HashTable *hash_table, HashTableIterator *iterator)$/;"	f
hash_table_lookup	hash-table.c	/^HashTableValue hash_table_lookup(HashTable *hash_table, HashTableKey key)$/;"	f
hash_table_new	hash-table.c	/^HashTable *hash_table_new(HashTableHashFunc hash_func,$/;"	f
hash_table_num_entries	hash-table.c	/^unsigned int hash_table_num_entries(HashTable *hash_table)$/;"	f
hash_table_num_primes	hash-table.c	/^static const unsigned int hash_table_num_primes$/;"	v	file:
hash_table_primes	hash-table.c	/^static const unsigned int hash_table_primes[] = {$/;"	v	file:
hash_table_register_free_functions	hash-table.c	/^void hash_table_register_free_functions(HashTable *hash_table,$/;"	f
hash_table_remove	hash-table.c	/^int hash_table_remove(HashTable *hash_table, HashTableKey key)$/;"	f
host_alias	Makefile	/^host_alias = $/;"	m
htmldir	Makefile	/^htmldir = ${docdir}$/;"	m
id	lst_string.h	/^  int                         id;$/;"	m	struct:lst_string
id	lst_structs.h	/^  u_int                       id;$/;"	m	struct:lst_node
includedir	Makefile	/^includedir = ${prefix}\/include$/;"	m
index	lst_structs.h	/^  int                         index;$/;"	m	struct:lst_node
index	lst_structs.h	/^  int           index;$/;"	m	struct:lst_string_hash_item
infodir	Makefile	/^infodir = ${datarootdir}\/info$/;"	m
install_sh	Makefile	/^install_sh = ${SHELL} \/home\/yafei\/workspace_for_github\/klcs\/install-sh$/;"	m
install_sh_DATA	Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
is_equal_bitstrings	lst_algorithms.c	/^static int is_equal_bitstrings(u_char * b1, u_char * b2, int len)$/;"	f	file:
item_size	lst_string.h	/^  u_int                       item_size;$/;"	m	struct:lst_string
items	lst_structs.h	/^  LIST_ENTRY(lst_phase_num)   items;$/;"	m	struct:lst_phase_num
items	lst_structs.h	/^  LIST_ENTRY(lst_string_hash_item) items;$/;"	m	struct:lst_string_hash_item
iteration	lst_structs.h	/^  TAILQ_ENTRY(lst_node)       iteration;$/;"	m	struct:lst_node
k	lst_algorithms.c	/^  int            k; \/\/ denote longest k common substring$/;"	m	struct:lst_lcs_data	file:
key	hash-table.h	/^	HashTableKey key;$/;"	m	struct:_HashTablePair
key_free_func	hash-table.c	/^	HashTableKeyFreeFunc key_free_func;$/;"	m	struct:_HashTable	file:
kids	lst_structs.h	/^  LIST_HEAD(elist, lst_edge)  kids;$/;"	m	struct:lst_node
kmp_search	pattern_search.c	/^int*  kmp_search(char *pattern, char *target) {$/;"	f
lcs	lst_algorithms.c	/^  int          lcs;$/;"	m	struct:lst_lcs_data	file:
lcs_visited	lst_structs.h	/^  u_int                       lcs_visited; \/\/ add by syf$/;"	m	struct:lst_node
lcstext_DEPENDENCIES	Makefile	/^lcstext_DEPENDENCIES =$/;"	m
lcstext_LDADD	Makefile	/^lcstext_LDADD = -lc -lm$/;"	m
lcstext_LDFLAGS	Makefile	/^lcstext_LDFLAGS = -L\/lib $/;"	m
lcstext_LINK	Makefile	/^lcstext_LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(lcstext_LDFLAGS) \\$/;"	m
lcstext_OBJECTS	Makefile	/^lcstext_OBJECTS = $(am_lcstext_OBJECTS)$/;"	m
lcstext_SOURCES	Makefile	/^lcstext_SOURCES = lcstext.c libstree.h lst_algorithms.c lst_algorithms.h lst_debug.c lst_debug.h lst_stree.c lst_stree.h \\$/;"	m
leafs	lst_structs.h	/^  LIST_ENTRY(lst_node)        leafs;$/;"	m	struct:lst_node
leafs	lst_structs.h	/^  LIST_HEAD(leaf_s, lst_node)       leafs;$/;"	m	struct:lst_stree
libdir	Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
localedir	Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	Makefile	/^localstatedir = ${prefix}\/var$/;"	m
lst_alg_bfs	lst_algorithms.c	/^lst_alg_bfs(LST_STree *tree, LST_NodeVisitCB callback, void *data)$/;"	f
lst_alg_bus	lst_algorithms.c	/^lst_alg_bus(LST_STree *tree, LST_NodeVisitCB callback, void *data)$/;"	f
lst_alg_dfs	lst_algorithms.c	/^lst_alg_dfs(LST_STree *tree, LST_NodeVisitCB callback, void *data)$/;"	f
lst_alg_first_k_longest_common_substring	lst_algorithms.c	/^lst_alg_first_k_longest_common_substring(LST_STree *tree, u_int min_len, u_int max_len, u_int * extension)$/;"	f
lst_alg_k_longest_common_substring	lst_algorithms.c	/^lst_alg_k_longest_common_substring(LST_STree *tree, u_int min_len, u_int max_len, int k, u_int  *extension)$/;"	f
lst_alg_leafs	lst_algorithms.c	/^lst_alg_leafs(LST_STree *tree, LST_NodeVisitCB callback, void *data)$/;"	f
lst_alg_longest_common_substring	lst_algorithms.c	/^lst_alg_longest_common_substring(LST_STree *tree, u_int min_len, u_int max_len, u_int * extension)$/;"	f
lst_alg_longest_repeated_substring	lst_algorithms.c	/^lst_alg_longest_repeated_substring(LST_STree *tree, u_int min_len, u_int max_len, u_int *extension)$/;"	f
lst_alg_set_visitors	lst_algorithms.c	/^lst_alg_set_visitors(LST_STree *tree)$/;"	f
lst_alg_substring_check	lst_algorithms.c	/^int lst_alg_substring_check(LST_STree *tree, LST_String *string)$/;"	f
lst_debug_print_substring	lst_debug.c	/^lst_debug_print_substring(LST_String *string,$/;"	f
lst_debug_print_substring	lst_debug.h	92;"	d
lst_debug_print_tree	lst_debug.c	/^lst_debug_print_tree(LST_STree *tree)$/;"	f
lst_debug_qi_new	lst_debug.c	/^lst_debug_qi_new(LST_Node *node)$/;"	f	file:
lst_edge	lst_structs.h	/^struct lst_edge$/;"	s
lst_edge_get_length	lst_stree.c	/^lst_edge_get_length(LST_Edge *edge)$/;"	f
lst_lcs_data	lst_algorithms.c	/^typedef struct lst_lcs_data$/;"	s	file:
lst_node	lst_structs.h	/^struct lst_node$/;"	s
lst_node_get_parent	lst_stree.c	/^lst_node_get_parent(LST_Node *node)$/;"	f
lst_node_get_string	lst_stree.c	/^lst_node_get_string(LST_Node *node, int max_len)$/;"	f
lst_node_get_string_length	lst_stree.c	/^lst_node_get_string_length(LST_Node *node)$/;"	f
lst_node_is_leaf	lst_stree.c	/^lst_node_is_leaf(LST_Node *node)$/;"	f
lst_node_is_root	lst_stree.c	/^lst_node_is_root(LST_Node *node)$/;"	f
lst_node_it	lst_algorithms.c	/^typedef struct lst_node_it$/;"	s	file:
lst_path_end	lst_stree.c	/^typedef struct lst_path_end$/;"	s	file:
lst_phase_num	lst_structs.h	/^struct lst_phase_num$/;"	s
lst_stderr	lst_debug.h	57;"	d
lst_stree	lst_structs.h	/^struct lst_stree$/;"	s
lst_stree_add_string	lst_stree.c	/^lst_stree_add_string(LST_STree *tree, LST_String *string)$/;"	f
lst_stree_allow_duplicates	lst_stree.c	/^lst_stree_allow_duplicates(LST_STree *tree, int duplicates_flag)$/;"	f
lst_stree_clear	lst_stree.c	/^lst_stree_clear(LST_STree *tree)$/;"	f
lst_stree_free	lst_stree.c	/^lst_stree_free(LST_STree *tree)$/;"	f
lst_stree_get_string_index	lst_stree.c	/^lst_stree_get_string_index(LST_STree *tree, LST_String *string)$/;"	f
lst_stree_init	lst_stree.c	/^lst_stree_init(LST_STree *tree)$/;"	f
lst_stree_new	lst_stree.c	/^lst_stree_new(LST_StringSet *strings)$/;"	f
lst_stree_qi	lst_debug.c	/^struct lst_stree_qi$/;"	s	file:
lst_stree_remove_string	lst_stree.c	/^lst_stree_remove_string(LST_STree *tree, LST_String *string)$/;"	f
lst_string	lst_string.h	/^struct lst_string$/;"	s
lst_string_eq	lst_string.c	/^lst_string_eq(LST_String *s1, u_int item1,$/;"	f
lst_string_free	lst_string.c	/^lst_string_free(LST_String *string)$/;"	f
lst_string_free_keep_data	lst_string.c	/^lst_string_free_keep_data(LST_String *string)$/;"	f
lst_string_get_item	lst_string.c	/^lst_string_get_item(LST_String *string, u_int index)$/;"	f
lst_string_get_length	lst_string.c	/^lst_string_get_length(LST_String *string)$/;"	f
lst_string_hash_item	lst_structs.h	/^struct lst_string_hash_item$/;"	s
lst_string_index_copy	lst_string.c	/^lst_string_index_copy(LST_StringIndex *src, LST_StringIndex *dst)$/;"	f
lst_string_index_init	lst_string.c	/^lst_string_index_init(LST_StringIndex *index)$/;"	f
lst_string_init	lst_string.c	/^lst_string_init(LST_String *string, void *data, u_int item_size, u_int num_items)$/;"	f
lst_string_item_copy	lst_string.c	/^lst_string_item_copy(LST_String *src, u_int src_index,$/;"	f
lst_string_items_common	lst_string.c	/^lst_string_items_common(LST_String *s1, u_int off1,$/;"	f
lst_string_new	lst_string.c	/^lst_string_new(void *data, u_int item_size, u_int num_items)$/;"	f
lst_string_print	lst_string.c	/^lst_string_print(LST_String *string)$/;"	f
lst_string_print_hex	lst_string.c	/^lst_string_print_hex(LST_StringIndex *index)$/;"	f
lst_string_set_class	lst_string.c	/^lst_string_set_class(LST_String *string, LST_StringClass *sclass)$/;"	f
lst_stringclass	lst_string.h	/^struct lst_stringclass$/;"	s
lst_stringclass_free	lst_string.c	/^lst_stringclass_free(LST_StringClass *sclass)$/;"	f
lst_stringclass_new	lst_string.c	/^lst_stringclass_new(LST_StringItemCmpFunc cmp_func,$/;"	f
lst_stringclass_set_defaults	lst_string.c	/^lst_stringclass_set_defaults(LST_StringItemCmpFunc cmp_func,$/;"	f
lst_stringindex	lst_string.h	/^struct lst_stringindex$/;"	s
lst_stringset	lst_string.h	/^struct lst_stringset$/;"	s
lst_stringset_add	lst_string.c	/^lst_stringset_add(LST_StringSet *set, LST_String *string)$/;"	f
lst_stringset_foreach	lst_string.c	/^lst_stringset_foreach(LST_StringSet *set,$/;"	f
lst_stringset_free	lst_string.c	/^lst_stringset_free(LST_StringSet *set)$/;"	f
lst_stringset_new	lst_string.c	/^lst_stringset_new(void)$/;"	f
lst_stringset_remove	lst_string.c	/^lst_stringset_remove(LST_StringSet *set, LST_String *string)$/;"	f
main	lcstext.c	/^main(int argc, char **argv)$/;"	f
main	position_constraints.c	/^int main(int argc, char * argv[]) {$/;"	f
make_dummy_depfile	depcomp	/^make_dummy_depfile ()$/;"	f
mandir	Makefile	/^mandir = ${datarootdir}\/man$/;"	m
max_depth	lst_algorithms.c	/^  int           max_depth;$/;"	m	struct:lst_lcs_data	file:
members	lst_string.h	/^  LIST_HEAD(slist, lst_string) members;  $/;"	m	struct:lst_stringset
mkdir_p	Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
needs_visitor_update	lst_structs.h	/^  int                               needs_visitor_update;$/;"	m	struct:lst_stree
next	hash-table.c	/^	HashTableEntry *next;$/;"	m	struct:_HashTableEntry	file:
next	trie.h	/^	TrieNode *next[256];$/;"	m	struct:_TrieNode
next_chain	hash-table.h	/^	unsigned int next_chain;$/;"	m	struct:_HashTableIterator
next_entry	hash-table.h	/^	HashTableEntry *next_entry;$/;"	m	struct:_HashTableIterator
node	lst_algorithms.c	/^  LST_Node *node;$/;"	m	struct:lst_node_it	file:
node	lst_debug.c	/^  LST_Node *node;$/;"	m	struct:lst_stree_qi	file:
node	lst_stree.c	/^  LST_Node    *node;$/;"	m	struct:lst_path_end	file:
node_cb	lcstext.c	/^node_cb(LST_Node *node, void *data)$/;"	f
node_find_edge_with_startitem	lst_stree.c	/^node_find_edge_with_startitem(LST_Node *node, LST_String *string, u_int index)$/;"	f	file:
node_free	lst_stree.c	/^node_free(LST_Node *node)$/;"	f	file:
node_new	lst_stree.c	/^node_new(int index)$/;"	f	file:
num_deepest	lst_algorithms.c	/^  int           num_deepest;$/;"	m	struct:lst_lcs_data	file:
num_distinct_strings	lst_structs.h	/^  u_int                       num_distinct_strings;$/;"	m	struct:lst_node
num_items	lst_string.h	/^  u_int                       num_items;$/;"	m	struct:lst_string
num_kids	lst_structs.h	/^  u_int                       num_kids;$/;"	m	struct:lst_node
num_strings	lst_structs.h	/^  u_int                             num_strings;$/;"	m	struct:lst_stree
num_variants	position_constraints.h	/^	u_int num_variants; $/;"	m	struct:_offset_t
offset	lst_stree.c	/^  u_int        offset;$/;"	m	struct:lst_path_end	file:
offset	position_constraints.h	/^	u_int offset;$/;"	m	struct:_element_t
offset	position_constraints.h	/^	u_int offset;$/;"	m	struct:_offset_t
offset_occurrence	position_constraints.h	/^	HashTable * offset_occurrence;$/;"	m	struct:_token_t
offset_t	position_constraints.h	/^typedef struct _offset_t	offset_t; $/;"	t	typeref:struct:_offset_t
oldincludedir	Makefile	/^oldincludedir = \/usr\/include$/;"	m
pair	hash-table.c	/^	HashTablePair pair;$/;"	m	struct:_HashTableEntry	file:
pdfdir	Makefile	/^pdfdir = ${docdir}$/;"	m
phase	lst_structs.h	/^  u_int                            *phase;$/;"	m	struct:lst_stree
phase	lst_structs.h	/^  u_int                       phase;$/;"	m	struct:lst_phase_num
phases	lst_structs.h	/^  LIST_HEAD(phase_s, lst_phase_num) phases;$/;"	m	struct:lst_stree
pkgdatadir	Makefile	/^pkgdatadir = $(datadir)\/klcs$/;"	m
pkgincludedir	Makefile	/^pkgincludedir = $(includedir)\/klcs$/;"	m
pkglibdir	Makefile	/^pkglibdir = $(libdir)\/klcs$/;"	m
pkglibexecdir	Makefile	/^pkglibexecdir = $(libexecdir)\/klcs$/;"	m
positon_specific	position_constraints.h	/^	u_int positon_specific; $/;"	m	struct:_token_t
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prime_index	hash-table.c	/^	unsigned int prime_index;$/;"	m	struct:_HashTable	file:
print_bitstrings	lst_algorithms.c	/^int print_bitstrings(u_char * bitstrings, int len){$/;"	f
print_callback	position_constraints.c	/^static void print_callback(TrieNode *node) {$/;"	f	file:
print_func	lst_string.h	/^  LST_StringPrintFunc         print_func;$/;"	m	struct:lst_stringclass
program_details	missing	/^program_details ()$/;"	f
program_transform_name	Makefile	/^program_transform_name = s,x,x,$/;"	m
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
psdir	Makefile	/^psdir = ${docdir}$/;"	m
range	lst_structs.h	/^  LST_StringIndex             range;$/;"	m	struct:lst_edge
readContent	utils.c	/^void  readContent(char* pathName, LST_StringSet *set){$/;"	f
root_node	lst_structs.h	/^  LST_Node                         *root_node;$/;"	m	struct:lst_stree
root_node	trie.h	/^	TrieNode *root_node;$/;"	m	struct:_Trie
sbindir	Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sclass	lst_string.h	/^  LST_StringClass            *sclass;$/;"	m	struct:lst_string
set	lst_string.h	/^  LIST_ENTRY(lst_string)      set;$/;"	m	struct:lst_string
set_base_from	depcomp	/^set_base_from ()$/;"	f
set_dir_from	depcomp	/^set_dir_from ()$/;"	f
sharedstatedir	Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
siblings	lst_structs.h	/^  LIST_ENTRY(lst_edge)        siblings;$/;"	m	struct:lst_edge
size	lst_string.h	/^  int size;$/;"	m	struct:lst_stringset
size	position_constraints.h	/^	int size ; 	\/\/ the size of flow set$/;"	m	struct:_flow_set_t
src_node	lst_structs.h	/^  LST_Node                   *src_node;$/;"	m	struct:lst_edge
srcdir	Makefile	/^srcdir = .$/;"	m
start_index	lst_string.h	/^  u_int        start_index;$/;"	m	struct:lst_stringindex
str_cb	lst_algorithms.c	/^str_cb(LST_String *string, void *data)$/;"	f
stree_add_string_impl	lst_stree.c	/^stree_add_string_impl(LST_STree *tree, LST_String *string)$/;"	f	file:
stree_extend_at_edge	lst_stree.c	/^stree_extend_at_edge(LST_STree *tree, LST_String *string,$/;"	f	file:
stree_extend_at_node	lst_stree.c	/^stree_extend_at_node(LST_STree *tree, LST_String *string,$/;"	f	file:
stree_extend_label_at_leaf	lst_stree.c	/^stree_extend_label_at_leaf(LST_Node *leaf)$/;"	f	file:
stree_follow_string	lst_stree.c	/^stree_follow_string(LST_STree *tree, LST_Node *node,$/;"	f	file:
stree_follow_string_slow	lst_stree.c	/^stree_follow_string_slow(LST_STree *tree, LST_Node *node,$/;"	f	file:
stree_get_skipstring	lst_stree.c	/^stree_get_skipstring(LST_STree *tree, LST_PathEnd *end, LST_StringIndex *skipstring)$/;"	f	file:
stree_next_phase	lst_stree.c	/^stree_next_phase(LST_STree *tree)$/;"	f	file:
stree_path_end_advance	lst_stree.c	/^stree_path_end_advance(LST_PathEnd *end, LST_Edge *edge)$/;"	f	file:
stree_path_end_edge	lst_stree.c	/^stree_path_end_edge(LST_PathEnd *end, LST_Edge *edge, u_int offset)$/;"	f	file:
stree_path_end_node	lst_stree.c	/^stree_path_end_node(LST_PathEnd *end, LST_Node *node)$/;"	f	file:
stree_remove_edge	lst_stree.c	/^stree_remove_edge(LST_STree *tree, LST_Edge *edge)$/;"	f	file:
string	lst_string.h	/^  LST_String  *string;$/;"	m	struct:lst_stringindex
string	lst_structs.h	/^  LST_String   *string;$/;"	m	struct:lst_string_hash_item
string_byte_cmp_func	lst_string.c	/^string_byte_cmp_func(char *item1, char *item2)$/;"	f	file:
string_byte_copy_func	lst_string.c	/^string_byte_copy_func(char *src, char *dst)$/;"	f	file:
string_cb	lcstext.c	/^string_cb(LST_String *string, void *data)$/;"	f
string_hash	lst_structs.h	/^  LST_StringHash                   *string_hash;$/;"	m	struct:lst_stree
string_id_counter	lst_string.c	/^static int   string_id_counter;$/;"	v	file:
string_index	lst_structs.h	/^  int                               string_index;$/;"	m	struct:lst_stree
string_print_func	lst_string.c	/^string_print_func(LST_StringIndex *index)$/;"	f	file:
subdir	Makefile	/^subdir = .$/;"	m
suffix_link_node	lst_structs.h	/^  LST_Node                   *suffix_link_node;  $/;"	m	struct:lst_node
sysconfdir	Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
table	hash-table.c	/^	HashTableEntry **table;$/;"	m	struct:_HashTable	file:
table_size	hash-table.c	/^	unsigned int table_size;$/;"	m	struct:_HashTable	file:
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z$/;"	m
tardir	Makefile	/^	tardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz$/;"	m
target_alias	Makefile	/^target_alias = $/;"	m
test_usage	lcstext.c	/^test_usage(char *progname)$/;"	f	file:
token	position_constraints.h	/^	LST_String *token;$/;"	m	struct:_element_t
token	position_constraints.h	/^	LST_String *token;$/;"	m	struct:_token_t
token_add	position_constraints.c	/^void token_add(token_t *t, int offset) {$/;"	f
token_free	position_constraints.c	/^void token_free(token_t *t){$/;"	f
token_head	position_constraints.h	/^	LIST_HEAD(token_list, _token_t) token_head;$/;"	m	struct:_offset_t
token_new	position_constraints.c	/^token_t * token_new(LST_String *token, int offset){$/;"	f
token_print	position_constraints.c	/^void token_print(token_t *t){$/;"	f
token_t	position_constraints.h	/^typedef struct _token_t 	token_t;$/;"	t	typeref:struct:_token_t
top_build_prefix	Makefile	/^top_build_prefix = $/;"	m
top_builddir	Makefile	/^top_builddir = .$/;"	m
top_distdir	Makefile	/^top_distdir = $(distdir)$/;"	m
top_srcdir	Makefile	/^top_srcdir = .$/;"	m
transform	Makefile	/^transform = $(program_transform_name)$/;"	m
tree	lst_algorithms.c	/^  LST_STree    *tree;$/;"	m	struct:lst_lcs_data	file:
trie_alg_dfs	trie.c	/^static void trie_alg_dfs(TrieNode * subtrie, Trie_node_callback cb) {$/;"	f	file:
trie_dfs	trie.c	/^void trie_dfs(Trie *trie, Trie_node_callback cb) {$/;"	f
trie_find_end	trie.c	/^static TrieNode *trie_find_end(Trie *trie, char *key)$/;"	f	file:
trie_find_end_binary	trie.c	/^static TrieNode *trie_find_end_binary(Trie *trie, unsigned char *key,$/;"	f	file:
trie_free	trie.c	/^void trie_free(Trie *trie)$/;"	f
trie_free_list_pop	trie.c	/^static TrieNode *trie_free_list_pop(TrieNode **list)$/;"	f	file:
trie_free_list_push	trie.c	/^static void trie_free_list_push(TrieNode **list, TrieNode *node)$/;"	f	file:
trie_insert	trie.c	/^int trie_insert(Trie *trie, char *key, TrieValue value)$/;"	f
trie_insert_binary	trie.c	/^int trie_insert_binary(Trie *trie, unsigned char *key, int key_length,$/;"	f
trie_insert_rollback	trie.c	/^static void trie_insert_rollback(Trie *trie, unsigned char *key)$/;"	f	file:
trie_lookup	trie.c	/^TrieValue trie_lookup(Trie *trie, char *key)$/;"	f
trie_lookup_binary	trie.c	/^TrieValue trie_lookup_binary(Trie *trie, unsigned char *key, int key_length)$/;"	f
trie_new	trie.c	/^Trie *trie_new(void)$/;"	f
trie_num_entries	trie.c	/^unsigned int trie_num_entries(Trie *trie)$/;"	f
trie_remove	trie.c	/^int trie_remove(Trie *trie, char *key)$/;"	f
trie_remove_binary	trie.c	/^int trie_remove_binary(Trie *trie, unsigned char *key, int key_length)$/;"	f
up_edge	lst_structs.h	/^  LST_Edge                   *up_edge;$/;"	m	struct:lst_node
use_count	trie.h	/^	unsigned int use_count;$/;"	m	struct:_TrieNode
value	hash-table.h	/^	HashTableValue value;$/;"	m	struct:_HashTablePair
value_free_func	hash-table.c	/^	HashTableValueFreeFunc value_free_func;$/;"	m	struct:_HashTable	file:
